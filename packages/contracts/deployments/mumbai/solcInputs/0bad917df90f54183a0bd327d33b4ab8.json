{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IConditionalTokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IConditionalTokens {\n    /// @dev Emitted upon the successful preparation of a condition.\n    /// @param conditionId The condition's ID. This ID may be derived from the other three parameters via ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``.\n    /// @param oracle The account assigned to report the result for the prepared condition.\n    /// @param questionId An identifier for the question to be answered by the oracle.\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\n    event ConditionPreparation(\n        bytes32 indexed conditionId,\n        address indexed oracle,\n        bytes32 indexed questionId,\n        uint256 outcomeSlotCount\n    );\n\n    event ConditionResolution(\n        bytes32 indexed conditionId,\n        address indexed oracle,\n        bytes32 indexed questionId,\n        uint256 outcomeSlotCount,\n        uint256[] payoutNumerators\n    );\n\n    /// @dev Emitted when a position is successfully split.\n    event PositionSplit(\n        address indexed stakeholder,\n        IERC20 collateralToken,\n        bytes32 indexed parentCollectionId,\n        bytes32 indexed conditionId,\n        uint256[] partition,\n        uint256 amount\n    );\n    /// @dev Emitted when positions are successfully merged.\n    event PositionsMerge(\n        address indexed stakeholder,\n        IERC20 collateralToken,\n        bytes32 indexed parentCollectionId,\n        bytes32 indexed conditionId,\n        uint256[] partition,\n        uint256 amount\n    );\n    event PayoutRedemption(\n        address indexed redeemer,\n        IERC20 indexed collateralToken,\n        bytes32 indexed parentCollectionId,\n        bytes32 conditionId,\n        uint256[] indexSets,\n        uint256 payout\n    );\n\n    /// Mapping key is an condition ID. Value represents numerators of the payout vector associated with the condition. This array is initialized with a length equal to the outcome slot count. E.g. Condition with 3 outcomes [A, B, C] and two of those correct [0.5, 0.5, 0]. In Ethereum there are no decimal values, so here, 0.5 is represented by fractions like 1/2 == 0.5. That's why we need numerator and denominator values. Payout numerators are also used as a check of initialization. If the numerators array is empty (has length zero), the condition was not created/prepared. See getOutcomeSlotCount.\n    function payoutNumerators(bytes32) external returns (uint256[] memory);\n\n    /// Denominator is also used for checking if the condition has been resolved. If the denominator is non-zero, then the condition has been resolved.\n    function payoutDenominator(bytes32) external returns (uint256);\n\n    /// @dev This function prepares a condition by initializing a payout vector associated with the condition.\n    /// @param oracle The account assigned to report the result for the prepared condition.\n    /// @param questionId An identifier for the question to be answered by the oracle.\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\n    function prepareCondition(\n        address oracle,\n        bytes32 questionId,\n        uint256 outcomeSlotCount\n    ) external;\n\n    /// @dev Called by the oracle for reporting results of conditions. Will set the payout vector for the condition with the ID ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``, where oracle is the message sender, questionId is one of the parameters of this function, and outcomeSlotCount is the length of the payouts parameter, which contains the payoutNumerators for each outcome slot of the condition.\n    /// @param questionId The question ID the oracle is answering for\n    /// @param payouts The oracle's answer\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\n\n    /// @dev This function splits a position. If splitting from the collateral, this contract will attempt to transfer `amount` collateral from the message sender to itself. Otherwise, this contract will burn `amount` stake held by the message sender in the position being split worth of EIP 1155 tokens. Regardless, if successful, `amount` stake will be minted in the split target positions. If any of the transfers, mints, or burns fail, the transaction will revert. The transaction will also revert if the given partition is trivial, invalid, or refers to more slots than the condition is prepared with.\n    /// @param collateralToken The address of the positions' backing collateral token.\n    /// @param parentCollectionId The ID of the outcome collections common to the position being split and the split target positions. May be null, in which only the collateral is shared.\n    /// @param conditionId The ID of the condition to split on.\n    /// @param partition An array of disjoint index sets representing a nontrivial partition of the outcome slots of the given condition. E.g. A|B and C but not A|B and B|C (is not disjoint). Each element's a number which, together with the condition, represents the outcome collection. E.g. 0b110 is A|B, 0b010 is B, etc.\n    /// @param amount The amount of collateral or stake to split.\n    function splitPosition(\n        IERC20 collateralToken,\n        bytes32 parentCollectionId,\n        bytes32 conditionId,\n        uint256[] calldata partition,\n        uint256 amount\n    ) external;\n\n    function mergePositions(\n        IERC20 collateralToken,\n        bytes32 parentCollectionId,\n        bytes32 conditionId,\n        uint256[] calldata partition,\n        uint256 amount\n    ) external;\n\n    function redeemPositions(\n        IERC20 collateralToken,\n        bytes32 parentCollectionId,\n        bytes32 conditionId,\n        uint256[] calldata indexSets\n    ) external;\n\n    /// @dev Gets the outcome slot count of a condition.\n    /// @param conditionId ID of the condition.\n    /// @return Number of outcome slots associated with a condition, or zero if condition has not been prepared yet.\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\n\n    /// @dev Constructs a condition ID from an oracle, a question ID, and the outcome slot count for the question.\n    /// @param oracle The account assigned to report the result for the prepared condition.\n    /// @param questionId An identifier for the question to be answered by the oracle.\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\n    function getConditionId(\n        address oracle,\n        bytes32 questionId,\n        uint256 outcomeSlotCount\n    ) external pure returns (bytes32);\n\n    /// @dev Constructs an outcome collection ID from a parent collection and an outcome collection.\n    /// @param parentCollectionId Collection ID of the parent outcome collection, or bytes32(0) if there's no parent.\n    /// @param conditionId Condition ID of the outcome collection to combine with the parent outcome collection.\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection.\n    function getCollectionId(\n        bytes32 parentCollectionId,\n        bytes32 conditionId,\n        uint256 indexSet\n    ) external view returns (bytes32);\n\n    /// @dev Constructs a position ID from a collateral token and an outcome collection. These IDs are used as the ERC-1155 ID for this contract.\n    /// @param collateralToken Collateral token which backs the position.\n    /// @param collectionId ID of the outcome collection associated with this position.\n    function getPositionId(IERC20 collateralToken, bytes32 collectionId) external pure returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/UmaConditionalTokensBinaryAdapter.sol": {
      "content": "pragma solidity 0.7.5;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { IConditionalTokens } from \"./interfaces/IConditionalTokens.sol\";\nimport { IOptimisticOracle } from \"./interfaces/IOptimisticOracle.sol\";\n\n/**\n * @title UmaConditionalTokensBinaryAdapter\n * @notice allows a condition on a ConditionalTokens contract to be resolved via UMA's Optimistic Oracle\n */\ncontract UmaConditionalTokensBinaryAdapter is Ownable {\n    IConditionalTokens public immutable conditionalTokenContract;\n    IOptimisticOracle public immutable optimisticOracleContract;\n\n    // @notice Unique query identifier for the Optimistic Oracle\n    bytes32 public constant identifier = bytes32(\"YES_OR_NO_QUERY\");\n\n    // @notice Time period after which the owner can emergency resolve a condition\n    uint256 public constant emergencySafetyPeriod = 30 days;\n\n    struct QuestionData {\n        // @notice Unique ID of a condition\n        bytes32 questionID;\n        // @notice Data used to resolve a condition\n        bytes ancillaryData;\n        // @notice Unix timestamp at which a market can be resolved\n        uint256 resolutionTime;\n        // @notice ERC20 token address used for payment of rewards and fees\n        address rewardToken;\n        // @notice reward offered to a successful proposer\n        uint256 reward;\n        // @notice Flag marking whether resolution data has been requested from the Oracle\n        bool resolutionDataRequested;\n        // @notice Flag marking whether a condition is resolved\n        bool resolved;\n    }\n\n    mapping(bytes32 => QuestionData) public questions;\n\n    // @notice Emitted when a questionID is initialized\n    event QuestionInitialized(\n        bytes32 indexed questionID,\n        bytes question,\n        uint256 resolutionTime,\n        address rewardToken,\n        uint256 reward\n    );\n\n    // @notice Emitted when resolution data is requested from the Optimistic Oracle\n    event ResolutionDataRequested(\n        bytes32 indexed identifier,\n        uint256 indexed timestamp,\n        bytes32 indexed questionID,\n        bytes ancillaryData\n    );\n\n    // @notice Emitted when a question is resolved\n    event QuestionResolved(bytes32 indexed questionId, bool indexed emergencyReport);\n\n    constructor(address conditionalTokenAddress, address optimisticOracleAddress) Ownable() {\n        conditionalTokenContract = IConditionalTokens(conditionalTokenAddress);\n        optimisticOracleContract = IOptimisticOracle(optimisticOracleAddress);\n    }\n\n    /**\n     * @notice Initializes a question on the Adapter to report on. Once initialized, the resolution conditions may not be changed.\n     *\n     * @param questionID     - The unique questionID of the condition\n     * @param ancillaryData  - Holds data used to resolve a question\n     * @param resolutionTime - timestamp at which the Adapter can resolve a question\n     * @param rewardToken    - ERC20 token address used for payment of rewards and fees\n     * @param reward         - reward offered to a successful proposer\n     */\n    function initializeQuestion(\n        bytes32 questionID,\n        bytes memory ancillaryData,\n        uint256 resolutionTime,\n        address rewardToken,\n        uint256 reward\n    ) public onlyOwner {\n        require(!isQuestionInitialized(questionID), \"Adapter::initializeQuestion: Question already initialized\");\n        questions[questionID] = QuestionData({\n            questionID: questionID,\n            ancillaryData: ancillaryData,\n            resolutionTime: resolutionTime,\n            rewardToken: rewardToken,\n            reward: reward,\n            resolutionDataRequested: false,\n            resolved: false\n        });\n        emit QuestionInitialized(questionID, ancillaryData, resolutionTime, rewardToken, reward);\n    }\n\n    /**\n     * @notice - Checks whether or not a question can start the resolution process\n     * @param questionID - The unique questionID of the condition\n     */\n    function readyToRequestResolution(bytes32 questionID) public view returns (bool) {\n        if (!isQuestionInitialized(questionID)) {\n            return false;\n        }\n        QuestionData storage questionData = questions[questionID];\n        if (questionData.resolutionDataRequested == true) {\n            return false;\n        }\n        if (questionData.resolved == true) {\n            return false;\n        }\n        // solhint-disable-next-line not-rely-on-time\n        return block.timestamp > questionData.resolutionTime;\n    }\n\n    /**\n     * @notice Called by anyone to request resolution data from the Optimistic Oracle\n     * @param questionID - The unique questionID of the condition\n     */\n    function requestResolutionData(bytes32 questionID) public {\n        require(\n            readyToRequestResolution(questionID),\n            \"Adapter::requestResolutionData: Question not ready to be resolved\"\n        );\n        QuestionData storage questionData = questions[questionID];\n        optimisticOracleContract.requestPrice(\n            identifier,\n            questionData.resolutionTime,\n            questionData.ancillaryData,\n            IERC20(questionData.rewardToken),\n            questionData.reward\n        );\n        questionData.resolutionDataRequested = true;\n        emit ResolutionDataRequested(identifier, questionData.resolutionTime, questionID, questionData.ancillaryData);\n    }\n\n    /**\n     * @notice Checks whether a questionID is ready to report payouts\n     * @param questionID - The unique questionID of the condition\n     */\n    function readyToReportPayouts(bytes32 questionID) public view returns (bool) {\n        if (!isQuestionInitialized(questionID)) {\n            return false;\n        }\n        QuestionData storage questionData = questions[questionID];\n        if (questionData.resolutionDataRequested == false) {\n            return false;\n        }\n        if (questionData.resolved == true) {\n            return false;\n        }\n\n        return\n            optimisticOracleContract.hasPrice(\n                address(this),\n                identifier,\n                questionData.resolutionTime,\n                questionData.ancillaryData\n            );\n    }\n\n    /**\n     * @notice Can be called by anyone to resolve a condition\n     * @param questionID - The unique questionID of the condition\n     */\n    function reportPayouts(bytes32 questionID) public {\n        require(readyToReportPayouts(questionID), \"Adapter::reportPayouts: questionID not ready to report payouts\");\n        QuestionData storage questionData = questions[questionID];\n\n        // fetches resolution data from OO\n        uint256 resolutionData = uint256(\n            optimisticOracleContract.settleAndGetPrice(\n                identifier,\n                questionData.resolutionTime,\n                questionData.ancillaryData\n            )\n        );\n\n        // Payouts: [YES, NO]\n        uint256[] memory payouts = new uint256[](2);\n        require(resolutionData == 0 || resolutionData == 1, \"Adapter::reportPayouts: Invalid resolution data\");\n\n        if (resolutionData == 0) {\n            //NO: Set payouts to [0, 1]\n            payouts[0] = 0;\n            payouts[1] = 1;\n        } else {\n            // YES: Set payouts to [1, 0]\n            payouts[0] = 1;\n            payouts[1] = 0;\n        }\n\n        questionData.resolved = true;\n        conditionalTokenContract.reportPayouts(questionID, payouts);\n        emit QuestionResolved(questionID, false);\n    }\n\n    /**\n     * @notice Allows the owner to report payouts in an emergency\n     * @param questionID - The unique questionID of the condition\n     */\n    function emergencyReportPayouts(bytes32 questionID, uint256[] calldata payouts) external onlyOwner {\n        require(isQuestionInitialized(questionID), \"Adapter::emergencyReportPayouts: questionID is not initialized\");\n\n        require(\n            // solhint-disable-next-line not-rely-on-time\n            block.timestamp > questions[questionID].resolutionTime + emergencySafetyPeriod,\n            \"Adapter::emergencyReportPayouts: safety period has not passed\"\n        );\n\n        require((payouts[0] + payouts[1]) == 1, \"Adapter::emergencyReportPayouts: payouts must be binary\");\n        require(payouts.length == 2, \"Adapter::emergencyReportPayouts: payouts must be binary\");\n\n        QuestionData storage questionData = questions[questionID];\n\n        questionData.resolved = true;\n        conditionalTokenContract.reportPayouts(questionID, payouts);\n        emit QuestionResolved(questionID, true);\n    }\n\n    function isQuestionInitialized(bytes32 questionID) internal view returns (bool) {\n        return questions[questionID].resolutionTime != 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/interfaces/IOptimisticOracle.sol": {
      "content": "pragma solidity 0.7.5;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IOptimisticOracle {\n    /**\n     * @notice Requests a new price.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\n     * This can be changed with a subsequent call to setBond().\n     */\n    function requestPrice(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\n     * hasn't been settled.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return resolved price.\n     */\n    function settleAndGetPrice(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual returns (int256);\n\n    /**\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return true if price has resolved or settled, false otherwise.\n     */\n    function hasPrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external view virtual returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/mocks/MockConditionalTokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { CTHelpers } from \"../libraries/CTHelpers.sol\";\n\ncontract MockConditionalTokens {\n    using SafeMath for uint256;\n\n    /// @dev Emitted upon the successful preparation of a condition.\n    /// @param conditionId The condition's ID. This ID may be derived from the other three parameters via ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``.\n    /// @param oracle The account assigned to report the result for the prepared condition.\n    /// @param questionId An identifier for the question to be answered by the oracle.\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\n    event ConditionPreparation(\n        bytes32 indexed conditionId,\n        address indexed oracle,\n        bytes32 indexed questionId,\n        uint256 outcomeSlotCount\n    );\n\n    event ConditionResolution(\n        bytes32 indexed conditionId,\n        address indexed oracle,\n        bytes32 indexed questionId,\n        uint256 outcomeSlotCount,\n        uint256[] payoutNumerators\n    );\n\n    /// Mapping key is an condition ID. Value represents numerators of the payout vector associated with the condition. This array is initialized with a length equal to the outcome slot count. E.g. Condition with 3 outcomes [A, B, C] and two of those correct [0.5, 0.5, 0]. In Ethereum there are no decimal values, so here, 0.5 is represented by fractions like 1/2 == 0.5. That's why we need numerator and denominator values. Payout numerators are also used as a check of initialization. If the numerators array is empty (has length zero), the condition was not created/prepared. See getOutcomeSlotCount.\n    mapping(bytes32 => uint256[]) public payoutNumerators;\n    /// Denominator is also used for checking if the condition has been resolved. If the denominator is non-zero, then the condition has been resolved.\n    mapping(bytes32 => uint256) public payoutDenominator;\n\n    function getConditionId(\n        address oracle,\n        bytes32 questionId,\n        uint256 outcomeSlotCount\n    ) external pure returns (bytes32) {\n        return CTHelpers.getConditionId(oracle, questionId, outcomeSlotCount);\n    }\n\n    /// @dev This function prepares a condition by initializing a payout vector associated with the condition.\n    /// @param oracle The account assigned to report the result for the prepared condition.\n    /// @param questionId An identifier for the question to be answered by the oracle.\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\n    function prepareCondition(\n        address oracle,\n        bytes32 questionId,\n        uint256 outcomeSlotCount\n    ) external {\n        // Limit of 256 because we use a partition array that is a number of 256 bits.\n        require(outcomeSlotCount <= 256, \"too many outcome slots\");\n        require(outcomeSlotCount > 1, \"there should be more than one outcome slot\");\n        bytes32 conditionId = CTHelpers.getConditionId(oracle, questionId, outcomeSlotCount);\n        require(payoutNumerators[conditionId].length == 0, \"condition already prepared\");\n        payoutNumerators[conditionId] = new uint256[](outcomeSlotCount);\n        emit ConditionPreparation(conditionId, oracle, questionId, outcomeSlotCount);\n    }\n\n    /// @dev Called by the oracle for reporting results of conditions. Will set the payout vector for the condition with the ID ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``, where oracle is the message sender, questionId is one of the parameters of this function, and outcomeSlotCount is the length of the payouts parameter, which contains the payoutNumerators for each outcome slot of the condition.\n    /// @param questionId The question ID the oracle is answering for\n    /// @param payouts The oracle's answer\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external {\n        uint256 outcomeSlotCount = payouts.length;\n        require(outcomeSlotCount > 1, \"there should be more than one outcome slot\");\n        // IMPORTANT, the oracle is enforced to be the sender because it's part of the hash.\n        bytes32 conditionId = CTHelpers.getConditionId(msg.sender, questionId, outcomeSlotCount);\n        require(payoutNumerators[conditionId].length == outcomeSlotCount, \"condition not prepared or found\");\n        require(payoutDenominator[conditionId] == 0, \"payout denominator already set\");\n\n        uint256 den = 0;\n        for (uint256 i = 0; i < outcomeSlotCount; i++) {\n            uint256 num = payouts[i];\n            den = den.add(num);\n\n            require(payoutNumerators[conditionId][i] == 0, \"payout numerator already set\");\n            payoutNumerators[conditionId][i] = num;\n        }\n        require(den > 0, \"payout is all zeroes\");\n        payoutDenominator[conditionId] = den;\n        emit ConditionResolution(conditionId, msg.sender, questionId, outcomeSlotCount, payoutNumerators[conditionId]);\n    }\n}\n"
    },
    "contracts/libraries/CTHelpers.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\n\npragma solidity 0.7.5;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title CTHelpers\n * @author Gnosis (https://gnosis.io)\n * @notice Library copied from https://github.com/gnosis/conditional-tokens-contracts to be compiled under solc 0.7.4\n * see: https://github.com/gnosis/conditional-tokens-contracts/blob/4afa2fe/contracts/CTHelpers.sol\n */\nlibrary CTHelpers {\n    /// @dev Constructs a condition ID from an oracle, a question ID, and the outcome slot count for the question.\n    /// @param oracle The account assigned to report the result for the prepared condition.\n    /// @param questionId An identifier for the question to be answered by the oracle.\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\n    function getConditionId(\n        address oracle,\n        bytes32 questionId,\n        uint256 outcomeSlotCount\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount));\n    }\n\n    uint256 public constant P = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n    uint256 public constant B = 3;\n\n    function sqrt(uint256 x) private pure returns (uint256 y) {\n        uint256 p = P;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // add chain generated via https://crypto.stackexchange.com/q/27179/71252\n            // and transformed to the following program:\n\n            // x=1; y=x+x; z=y+y; z=z+z; y=y+z; x=x+y; y=y+x; z=y+y; t=z+z; t=z+t; t=t+t;\n            // t=t+t; z=z+t; x=x+z; z=x+x; z=z+z; y=y+z; z=y+y; z=z+z; z=z+z; z=y+z; x=x+z;\n            // z=x+x; z=z+z; z=z+z; z=x+z; y=y+z; x=x+y; z=x+x; z=z+z; y=y+z; z=y+y; t=z+z;\n            // t=t+t; t=t+t; z=z+t; x=x+z; y=y+x; z=y+y; z=z+z; z=z+z; x=x+z; z=x+x; z=z+z;\n            // z=x+z; z=z+z; z=z+z; z=x+z; y=y+z; z=y+y; t=z+z; t=t+t; t=z+t; t=y+t; t=t+t;\n            // t=t+t; t=t+t; t=t+t; z=z+t; x=x+z; z=x+x; z=x+z; y=y+z; z=y+y; z=y+z; z=z+z;\n            // t=z+z; t=z+t; w=t+t; w=w+w; w=w+w; w=w+w; w=w+w; t=t+w; z=z+t; x=x+z; y=y+x;\n            // z=y+y; x=x+z; y=y+x; x=x+y; y=y+x; x=x+y; z=x+x; z=x+z; z=z+z; y=y+z; z=y+y;\n            // z=z+z; x=x+z; y=y+x; z=y+y; z=y+z; x=x+z; y=y+x; x=x+y; y=y+x; z=y+y; z=z+z;\n            // z=y+z; x=x+z; z=x+x; z=x+z; y=y+z; x=x+y; y=y+x; x=x+y; y=y+x; z=y+y; z=y+z;\n            // z=z+z; x=x+z; y=y+x; z=y+y; z=y+z; z=z+z; x=x+z; z=x+x; t=z+z; t=t+t; t=z+t;\n            // t=x+t; t=t+t; t=t+t; t=t+t; t=t+t; z=z+t; y=y+z; x=x+y; y=y+x; x=x+y; z=x+x;\n            // z=x+z; z=z+z; z=z+z; z=z+z; z=x+z; y=y+z; z=y+y; z=y+z; z=z+z; x=x+z; z=x+x;\n            // z=x+z; y=y+z; x=x+y; z=x+x; z=z+z; y=y+z; x=x+y; z=x+x; y=y+z; x=x+y; y=y+x;\n            // z=y+y; z=y+z; x=x+z; y=y+x; z=y+y; z=y+z; z=z+z; z=z+z; x=x+z; z=x+x; z=z+z;\n            // z=z+z; z=x+z; y=y+z; x=x+y; z=x+x; t=x+z; t=t+t; t=t+t; z=z+t; y=y+z; z=y+y;\n            // x=x+z; y=y+x; x=x+y; y=y+x; x=x+y; y=y+x; z=y+y; t=y+z; z=y+t; z=z+z; z=z+z;\n            // z=t+z; x=x+z; y=y+x; x=x+y; y=y+x; x=x+y; z=x+x; z=x+z; y=y+z; x=x+y; x=x+x;\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\n            // x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x; x=x+x;\n            // x=x+x; x=x+x; x=x+x; x=x+x; res=y+x\n            // res == (P + 1) // 4\n\n            y := mulmod(x, x, p)\n            {\n                let z := mulmod(y, y, p)\n                z := mulmod(z, z, p)\n                y := mulmod(y, z, p)\n                x := mulmod(x, y, p)\n                y := mulmod(y, x, p)\n                z := mulmod(y, y, p)\n                {\n                    let t := mulmod(z, z, p)\n                    t := mulmod(z, t, p)\n                    t := mulmod(t, t, p)\n                    t := mulmod(t, t, p)\n                    z := mulmod(z, t, p)\n                    x := mulmod(x, z, p)\n                    z := mulmod(x, x, p)\n                    z := mulmod(z, z, p)\n                    y := mulmod(y, z, p)\n                    z := mulmod(y, y, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(y, z, p)\n                    x := mulmod(x, z, p)\n                    z := mulmod(x, x, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(x, z, p)\n                    y := mulmod(y, z, p)\n                    x := mulmod(x, y, p)\n                    z := mulmod(x, x, p)\n                    z := mulmod(z, z, p)\n                    y := mulmod(y, z, p)\n                    z := mulmod(y, y, p)\n                    t := mulmod(z, z, p)\n                    t := mulmod(t, t, p)\n                    t := mulmod(t, t, p)\n                    z := mulmod(z, t, p)\n                    x := mulmod(x, z, p)\n                    y := mulmod(y, x, p)\n                    z := mulmod(y, y, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(z, z, p)\n                    x := mulmod(x, z, p)\n                    z := mulmod(x, x, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(x, z, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(x, z, p)\n                    y := mulmod(y, z, p)\n                    z := mulmod(y, y, p)\n                    t := mulmod(z, z, p)\n                    t := mulmod(t, t, p)\n                    t := mulmod(z, t, p)\n                    t := mulmod(y, t, p)\n                    t := mulmod(t, t, p)\n                    t := mulmod(t, t, p)\n                    t := mulmod(t, t, p)\n                    t := mulmod(t, t, p)\n                    z := mulmod(z, t, p)\n                    x := mulmod(x, z, p)\n                    z := mulmod(x, x, p)\n                    z := mulmod(x, z, p)\n                    y := mulmod(y, z, p)\n                    z := mulmod(y, y, p)\n                    z := mulmod(y, z, p)\n                    z := mulmod(z, z, p)\n                    t := mulmod(z, z, p)\n                    t := mulmod(z, t, p)\n                    {\n                        let w := mulmod(t, t, p)\n                        w := mulmod(w, w, p)\n                        w := mulmod(w, w, p)\n                        w := mulmod(w, w, p)\n                        w := mulmod(w, w, p)\n                        t := mulmod(t, w, p)\n                    }\n                    z := mulmod(z, t, p)\n                    x := mulmod(x, z, p)\n                    y := mulmod(y, x, p)\n                    z := mulmod(y, y, p)\n                    x := mulmod(x, z, p)\n                    y := mulmod(y, x, p)\n                    x := mulmod(x, y, p)\n                    y := mulmod(y, x, p)\n                    x := mulmod(x, y, p)\n                    z := mulmod(x, x, p)\n                    z := mulmod(x, z, p)\n                    z := mulmod(z, z, p)\n                    y := mulmod(y, z, p)\n                    z := mulmod(y, y, p)\n                    z := mulmod(z, z, p)\n                    x := mulmod(x, z, p)\n                    y := mulmod(y, x, p)\n                    z := mulmod(y, y, p)\n                    z := mulmod(y, z, p)\n                    x := mulmod(x, z, p)\n                    y := mulmod(y, x, p)\n                    x := mulmod(x, y, p)\n                    y := mulmod(y, x, p)\n                    z := mulmod(y, y, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(y, z, p)\n                    x := mulmod(x, z, p)\n                    z := mulmod(x, x, p)\n                    z := mulmod(x, z, p)\n                    y := mulmod(y, z, p)\n                    x := mulmod(x, y, p)\n                    y := mulmod(y, x, p)\n                    x := mulmod(x, y, p)\n                    y := mulmod(y, x, p)\n                    z := mulmod(y, y, p)\n                    z := mulmod(y, z, p)\n                    z := mulmod(z, z, p)\n                    x := mulmod(x, z, p)\n                    y := mulmod(y, x, p)\n                    z := mulmod(y, y, p)\n                    z := mulmod(y, z, p)\n                    z := mulmod(z, z, p)\n                    x := mulmod(x, z, p)\n                    z := mulmod(x, x, p)\n                    t := mulmod(z, z, p)\n                    t := mulmod(t, t, p)\n                    t := mulmod(z, t, p)\n                    t := mulmod(x, t, p)\n                    t := mulmod(t, t, p)\n                    t := mulmod(t, t, p)\n                    t := mulmod(t, t, p)\n                    t := mulmod(t, t, p)\n                    z := mulmod(z, t, p)\n                    y := mulmod(y, z, p)\n                    x := mulmod(x, y, p)\n                    y := mulmod(y, x, p)\n                    x := mulmod(x, y, p)\n                    z := mulmod(x, x, p)\n                    z := mulmod(x, z, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(x, z, p)\n                    y := mulmod(y, z, p)\n                    z := mulmod(y, y, p)\n                    z := mulmod(y, z, p)\n                    z := mulmod(z, z, p)\n                    x := mulmod(x, z, p)\n                    z := mulmod(x, x, p)\n                    z := mulmod(x, z, p)\n                    y := mulmod(y, z, p)\n                    x := mulmod(x, y, p)\n                    z := mulmod(x, x, p)\n                    z := mulmod(z, z, p)\n                    y := mulmod(y, z, p)\n                    x := mulmod(x, y, p)\n                    z := mulmod(x, x, p)\n                    y := mulmod(y, z, p)\n                    x := mulmod(x, y, p)\n                    y := mulmod(y, x, p)\n                    z := mulmod(y, y, p)\n                    z := mulmod(y, z, p)\n                    x := mulmod(x, z, p)\n                    y := mulmod(y, x, p)\n                    z := mulmod(y, y, p)\n                    z := mulmod(y, z, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(z, z, p)\n                    x := mulmod(x, z, p)\n                    z := mulmod(x, x, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(x, z, p)\n                    y := mulmod(y, z, p)\n                    x := mulmod(x, y, p)\n                    z := mulmod(x, x, p)\n                    t := mulmod(x, z, p)\n                    t := mulmod(t, t, p)\n                    t := mulmod(t, t, p)\n                    z := mulmod(z, t, p)\n                    y := mulmod(y, z, p)\n                    z := mulmod(y, y, p)\n                    x := mulmod(x, z, p)\n                    y := mulmod(y, x, p)\n                    x := mulmod(x, y, p)\n                    y := mulmod(y, x, p)\n                    x := mulmod(x, y, p)\n                    y := mulmod(y, x, p)\n                    z := mulmod(y, y, p)\n                    t := mulmod(y, z, p)\n                    z := mulmod(y, t, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(z, z, p)\n                    z := mulmod(t, z, p)\n                }\n                x := mulmod(x, z, p)\n                y := mulmod(y, x, p)\n                x := mulmod(x, y, p)\n                y := mulmod(y, x, p)\n                x := mulmod(x, y, p)\n                z := mulmod(x, x, p)\n                z := mulmod(x, z, p)\n                y := mulmod(y, z, p)\n            }\n            x := mulmod(x, y, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            x := mulmod(x, x, p)\n            y := mulmod(y, x, p)\n        }\n    }\n\n    /// @dev Constructs an outcome collection ID from a parent collection and an outcome collection.\n    /// @param parentCollectionId Collection ID of the parent outcome collection, or bytes32(0) if there's no parent.\n    /// @param conditionId Condition ID of the outcome collection to combine with the parent outcome collection.\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection.\n    function getCollectionId(\n        bytes32 parentCollectionId,\n        bytes32 conditionId,\n        uint256 indexSet\n    ) internal view returns (bytes32) {\n        uint256 x1 = uint256(keccak256(abi.encodePacked(conditionId, indexSet)));\n        bool odd = x1 >> 255 != 0;\n        uint256 y1;\n        uint256 yy;\n        do {\n            x1 = addmod(x1, 1, P);\n            yy = addmod(mulmod(x1, mulmod(x1, x1, P), P), B, P);\n            y1 = sqrt(yy);\n        } while (mulmod(y1, y1, P) != yy);\n        if ((odd && y1 % 2 == 0) || (!odd && y1 % 2 == 1)) y1 = P - y1;\n\n        uint256 x2 = uint256(parentCollectionId);\n        if (x2 != 0) {\n            odd = x2 >> 254 != 0;\n            x2 = (x2 << 2) >> 2;\n            yy = addmod(mulmod(x2, mulmod(x2, x2, P), P), B, P);\n            uint256 y2 = sqrt(yy);\n            if ((odd && y2 % 2 == 0) || (!odd && y2 % 2 == 1)) y2 = P - y2;\n            require(mulmod(y2, y2, P) == yy, \"invalid parent collection ID\");\n\n            (bool success, bytes memory ret) = address(6).staticcall(abi.encode(x1, y1, x2, y2));\n            require(success, \"ecadd failed\");\n            (x1, y1) = abi.decode(ret, (uint256, uint256));\n        }\n\n        if (y1 % 2 == 1) x1 ^= 1 << 254;\n\n        return bytes32(x1);\n    }\n\n    /// @dev Constructs a position ID from a collateral token and an outcome collection. These IDs are used as the ERC-1155 ID for this contract.\n    /// @param collateralToken Collateral token which backs the position.\n    /// @param collectionId ID of the outcome collection associated with this position.\n    function getPositionId(IERC20 collateralToken, bytes32 collectionId) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(collateralToken, collectionId)));\n    }\n}\n"
    },
    "contracts/test/TestERC20.sol": {
      "content": "pragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestERC20 is ERC20 {\n    // solhint-disable-next-line no-empty-blocks\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\n\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}