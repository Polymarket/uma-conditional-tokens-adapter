{
  "address": "0xf1a3470Ea4943783d680ec2A8a05aE517684513D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "conditionalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "optimisticOracleAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "question",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resolutionTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "QuestionInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "emergencyReport",
          "type": "bool"
        }
      ],
      "name": "QuestionResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "ResolutionDataRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "conditionalTokenContract",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "payouts",
          "type": "uint256[]"
        }
      ],
      "name": "emergencyReportPayouts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencySafetyPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "resolutionTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "initializeQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optimisticOracleContract",
      "outputs": [
        {
          "internalType": "contract IOptimisticOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "questions",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "resolutionTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "resolutionDataRequested",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "readyToReportPayouts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "readyToRequestResolution",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "reportPayouts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionID",
          "type": "bytes32"
        }
      ],
      "name": "requestResolutionData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd361a3b253f5b39a5058884ca17e62aec5624d79fd1832419740fa6b171f7dea",
  "receipt": {
    "to": null,
    "from": "0xa470111768d17c6fA6C935748348FF1974Ca323d",
    "contractAddress": "0xf1a3470Ea4943783d680ec2A8a05aE517684513D",
    "transactionIndex": 50,
    "gasUsed": "1371607",
    "logsBloom": "0x00000000000000000000000000000000000000000020000000900000080000000000000000000000000000000000000000008000000000000000000000000000000004000000000000000000000000800001000000000000000140000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000800000000000000000000000000000000000000000000000200000000000000000000000000100000000000000000000000000000000004000000000000000000001000000000000000000000100000000100000000020000000000000000000000000000000000000000000000000000040000000100000",
    "blockHash": "0xf70141c074c006cfdecb3393e09f792e2f5b57573f85c6a3c70c4b9faf90bf69",
    "transactionHash": "0xd361a3b253f5b39a5058884ca17e62aec5624d79fd1832419740fa6b171f7dea",
    "logs": [
      {
        "transactionIndex": 50,
        "blockNumber": 18557264,
        "transactionHash": "0xd361a3b253f5b39a5058884ca17e62aec5624d79fd1832419740fa6b171f7dea",
        "address": "0xf1a3470Ea4943783d680ec2A8a05aE517684513D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a470111768d17c6fa6c935748348ff1974ca323d"
        ],
        "data": "0x",
        "logIndex": 326,
        "blockHash": "0xf70141c074c006cfdecb3393e09f792e2f5b57573f85c6a3c70c4b9faf90bf69"
      },
      {
        "transactionIndex": 50,
        "blockNumber": 18557264,
        "transactionHash": "0xd361a3b253f5b39a5058884ca17e62aec5624d79fd1832419740fa6b171f7dea",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a470111768d17c6fa6c935748348ff1974ca323d",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000026fbc1200d30000000000000000000000000000000000000000000000000014d10f67120d5e800000000000000000000000000000000000000000000005af8574dae5ae08a2de30000000000000000000000000000000000000000000000014ce9fab000c8b800000000000000000000000000000000000000000000005af85774aa1c00975de3",
        "logIndex": 327,
        "blockHash": "0xf70141c074c006cfdecb3393e09f792e2f5b57573f85c6a3c70c4b9faf90bf69"
      }
    ],
    "blockNumber": 18557264,
    "cumulativeGasUsed": "11900526",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4D97DCd97eC945f40cF65F87097ACe5EA0476045",
    "0xAaF3F29521877d7a28C21E379Bf7A5401883A6B2"
  ],
  "solcInputHash": "0bad917df90f54183a0bd327d33b4ab8",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conditionalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optimisticOracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"question\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resolutionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"QuestionInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"emergencyReport\",\"type\":\"bool\"}],\"name\":\"QuestionResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"ResolutionDataRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"conditionalTokenContract\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"payouts\",\"type\":\"uint256[]\"}],\"name\":\"emergencyReportPayouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencySafetyPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"resolutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"initializeQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticOracleContract\",\"outputs\":[{\"internalType\":\"contract IOptimisticOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"questions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"resolutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resolutionDataRequested\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"readyToReportPayouts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"readyToRequestResolution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"reportPayouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionID\",\"type\":\"bytes32\"}],\"name\":\"requestResolutionData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"emergencyReportPayouts(bytes32,uint256[])\":{\"params\":{\"questionID\":\"- The unique questionID of the condition\"}},\"initializeQuestion(bytes32,bytes,uint256,address,uint256)\":{\"params\":{\"ancillaryData\":\"- Holds data used to resolve a question\",\"questionID\":\"- The unique questionID of the condition\",\"resolutionTime\":\"- timestamp at which the Adapter can resolve a question\",\"reward\":\"- reward offered to a successful proposer\",\"rewardToken\":\"- ERC20 token address used for payment of rewards and fees\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"readyToReportPayouts(bytes32)\":{\"params\":{\"questionID\":\"- The unique questionID of the condition\"}},\"readyToRequestResolution(bytes32)\":{\"params\":{\"questionID\":\"- The unique questionID of the condition\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reportPayouts(bytes32)\":{\"params\":{\"questionID\":\"- The unique questionID of the condition\"}},\"requestResolutionData(bytes32)\":{\"params\":{\"questionID\":\"- The unique questionID of the condition\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"UmaConditionalTokensBinaryAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyReportPayouts(bytes32,uint256[])\":{\"notice\":\"Allows the owner to report payouts in an emergency\"},\"initializeQuestion(bytes32,bytes,uint256,address,uint256)\":{\"notice\":\"Initializes a question on the Adapter to report on. Once initialized, the resolution conditions may not be changed.\"},\"readyToReportPayouts(bytes32)\":{\"notice\":\"Checks whether a questionID is ready to report payouts\"},\"readyToRequestResolution(bytes32)\":{\"notice\":\"- Checks whether or not a question can start the resolution process\"},\"reportPayouts(bytes32)\":{\"notice\":\"Can be called by anyone to resolve a condition\"},\"requestResolutionData(bytes32)\":{\"notice\":\"Called by anyone to request resolution data from the Optimistic Oracle\"}},\"notice\":\"allows a condition on a ConditionalTokens contract to be resolved via UMA's Optimistic Oracle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UmaConditionalTokensBinaryAdapter.sol\":\"UmaConditionalTokensBinaryAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/UmaConditionalTokensBinaryAdapter.sol\":{\"content\":\"pragma solidity 0.7.5;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IConditionalTokens } from \\\"./interfaces/IConditionalTokens.sol\\\";\\nimport { IOptimisticOracle } from \\\"./interfaces/IOptimisticOracle.sol\\\";\\n\\n/**\\n * @title UmaConditionalTokensBinaryAdapter\\n * @notice allows a condition on a ConditionalTokens contract to be resolved via UMA's Optimistic Oracle\\n */\\ncontract UmaConditionalTokensBinaryAdapter is Ownable {\\n    IConditionalTokens public immutable conditionalTokenContract;\\n    IOptimisticOracle public immutable optimisticOracleContract;\\n\\n    // @notice Unique query identifier for the Optimistic Oracle\\n    bytes32 public constant identifier = bytes32(\\\"YES_OR_NO_QUERY\\\");\\n\\n    // @notice Time period after which the owner can emergency resolve a condition\\n    uint256 public constant emergencySafetyPeriod = 30 days;\\n\\n    struct QuestionData {\\n        // @notice Unique ID of a condition\\n        bytes32 questionID;\\n        // @notice Data used to resolve a condition\\n        bytes ancillaryData;\\n        // @notice Unix timestamp at which a market can be resolved\\n        uint256 resolutionTime;\\n        // @notice ERC20 token address used for payment of rewards and fees\\n        address rewardToken;\\n        // @notice reward offered to a successful proposer\\n        uint256 reward;\\n        // @notice Flag marking whether resolution data has been requested from the Oracle\\n        bool resolutionDataRequested;\\n        // @notice Flag marking whether a condition is resolved\\n        bool resolved;\\n    }\\n\\n    mapping(bytes32 => QuestionData) public questions;\\n\\n    // @notice Emitted when a questionID is initialized\\n    event QuestionInitialized(\\n        bytes32 indexed questionID,\\n        bytes question,\\n        uint256 resolutionTime,\\n        address rewardToken,\\n        uint256 reward\\n    );\\n\\n    // @notice Emitted when resolution data is requested from the Optimistic Oracle\\n    event ResolutionDataRequested(\\n        bytes32 indexed identifier,\\n        uint256 indexed timestamp,\\n        bytes32 indexed questionID,\\n        bytes ancillaryData\\n    );\\n\\n    // @notice Emitted when a question is resolved\\n    event QuestionResolved(bytes32 indexed questionId, bool indexed emergencyReport);\\n\\n    constructor(address conditionalTokenAddress, address optimisticOracleAddress) Ownable() {\\n        conditionalTokenContract = IConditionalTokens(conditionalTokenAddress);\\n        optimisticOracleContract = IOptimisticOracle(optimisticOracleAddress);\\n    }\\n\\n    /**\\n     * @notice Initializes a question on the Adapter to report on. Once initialized, the resolution conditions may not be changed.\\n     *\\n     * @param questionID     - The unique questionID of the condition\\n     * @param ancillaryData  - Holds data used to resolve a question\\n     * @param resolutionTime - timestamp at which the Adapter can resolve a question\\n     * @param rewardToken    - ERC20 token address used for payment of rewards and fees\\n     * @param reward         - reward offered to a successful proposer\\n     */\\n    function initializeQuestion(\\n        bytes32 questionID,\\n        bytes memory ancillaryData,\\n        uint256 resolutionTime,\\n        address rewardToken,\\n        uint256 reward\\n    ) public onlyOwner {\\n        require(!isQuestionInitialized(questionID), \\\"Adapter::initializeQuestion: Question already initialized\\\");\\n        questions[questionID] = QuestionData({\\n            questionID: questionID,\\n            ancillaryData: ancillaryData,\\n            resolutionTime: resolutionTime,\\n            rewardToken: rewardToken,\\n            reward: reward,\\n            resolutionDataRequested: false,\\n            resolved: false\\n        });\\n        emit QuestionInitialized(questionID, ancillaryData, resolutionTime, rewardToken, reward);\\n    }\\n\\n    /**\\n     * @notice - Checks whether or not a question can start the resolution process\\n     * @param questionID - The unique questionID of the condition\\n     */\\n    function readyToRequestResolution(bytes32 questionID) public view returns (bool) {\\n        if (!isQuestionInitialized(questionID)) {\\n            return false;\\n        }\\n        QuestionData storage questionData = questions[questionID];\\n        if (questionData.resolutionDataRequested == true) {\\n            return false;\\n        }\\n        if (questionData.resolved == true) {\\n            return false;\\n        }\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp > questionData.resolutionTime;\\n    }\\n\\n    /**\\n     * @notice Called by anyone to request resolution data from the Optimistic Oracle\\n     * @param questionID - The unique questionID of the condition\\n     */\\n    function requestResolutionData(bytes32 questionID) public {\\n        require(\\n            readyToRequestResolution(questionID),\\n            \\\"Adapter::requestResolutionData: Question not ready to be resolved\\\"\\n        );\\n        QuestionData storage questionData = questions[questionID];\\n        optimisticOracleContract.requestPrice(\\n            identifier,\\n            questionData.resolutionTime,\\n            questionData.ancillaryData,\\n            IERC20(questionData.rewardToken),\\n            questionData.reward\\n        );\\n        questionData.resolutionDataRequested = true;\\n        emit ResolutionDataRequested(identifier, questionData.resolutionTime, questionID, questionData.ancillaryData);\\n    }\\n\\n    /**\\n     * @notice Checks whether a questionID is ready to report payouts\\n     * @param questionID - The unique questionID of the condition\\n     */\\n    function readyToReportPayouts(bytes32 questionID) public view returns (bool) {\\n        if (!isQuestionInitialized(questionID)) {\\n            return false;\\n        }\\n        QuestionData storage questionData = questions[questionID];\\n        if (questionData.resolutionDataRequested == false) {\\n            return false;\\n        }\\n        if (questionData.resolved == true) {\\n            return false;\\n        }\\n\\n        return\\n            optimisticOracleContract.hasPrice(\\n                address(this),\\n                identifier,\\n                questionData.resolutionTime,\\n                questionData.ancillaryData\\n            );\\n    }\\n\\n    /**\\n     * @notice Can be called by anyone to resolve a condition\\n     * @param questionID - The unique questionID of the condition\\n     */\\n    function reportPayouts(bytes32 questionID) public {\\n        require(readyToReportPayouts(questionID), \\\"Adapter::reportPayouts: questionID not ready to report payouts\\\");\\n        QuestionData storage questionData = questions[questionID];\\n\\n        // fetches resolution data from OO\\n        uint256 resolutionData = uint256(\\n            optimisticOracleContract.settleAndGetPrice(\\n                identifier,\\n                questionData.resolutionTime,\\n                questionData.ancillaryData\\n            )\\n        );\\n\\n        // Payouts: [YES, NO]\\n        uint256[] memory payouts = new uint256[](2);\\n        require(resolutionData == 0 || resolutionData == 1, \\\"Adapter::reportPayouts: Invalid resolution data\\\");\\n\\n        if (resolutionData == 0) {\\n            //NO: Set payouts to [0, 1]\\n            payouts[0] = 0;\\n            payouts[1] = 1;\\n        } else {\\n            // YES: Set payouts to [1, 0]\\n            payouts[0] = 1;\\n            payouts[1] = 0;\\n        }\\n\\n        questionData.resolved = true;\\n        conditionalTokenContract.reportPayouts(questionID, payouts);\\n        emit QuestionResolved(questionID, false);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to report payouts in an emergency\\n     * @param questionID - The unique questionID of the condition\\n     */\\n    function emergencyReportPayouts(bytes32 questionID, uint256[] calldata payouts) external onlyOwner {\\n        require(isQuestionInitialized(questionID), \\\"Adapter::emergencyReportPayouts: questionID is not initialized\\\");\\n\\n        require(\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp > questions[questionID].resolutionTime + emergencySafetyPeriod,\\n            \\\"Adapter::emergencyReportPayouts: safety period has not passed\\\"\\n        );\\n\\n        require((payouts[0] + payouts[1]) == 1, \\\"Adapter::emergencyReportPayouts: payouts must be binary\\\");\\n        require(payouts.length == 2, \\\"Adapter::emergencyReportPayouts: payouts must be binary\\\");\\n\\n        QuestionData storage questionData = questions[questionID];\\n\\n        questionData.resolved = true;\\n        conditionalTokenContract.reportPayouts(questionID, payouts);\\n        emit QuestionResolved(questionID, true);\\n    }\\n\\n    function isQuestionInitialized(bytes32 questionID) internal view returns (bool) {\\n        return questions[questionID].resolutionTime != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3b4ec176aec2ffaf00cac5c6dfe98863e864170ca5f61caedd216e4a1d64e58e\"},\"contracts/interfaces/IConditionalTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IConditionalTokens {\\n    /// @dev Emitted upon the successful preparation of a condition.\\n    /// @param conditionId The condition's ID. This ID may be derived from the other three parameters via ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    event ConditionPreparation(\\n        bytes32 indexed conditionId,\\n        address indexed oracle,\\n        bytes32 indexed questionId,\\n        uint256 outcomeSlotCount\\n    );\\n\\n    event ConditionResolution(\\n        bytes32 indexed conditionId,\\n        address indexed oracle,\\n        bytes32 indexed questionId,\\n        uint256 outcomeSlotCount,\\n        uint256[] payoutNumerators\\n    );\\n\\n    /// @dev Emitted when a position is successfully split.\\n    event PositionSplit(\\n        address indexed stakeholder,\\n        IERC20 collateralToken,\\n        bytes32 indexed parentCollectionId,\\n        bytes32 indexed conditionId,\\n        uint256[] partition,\\n        uint256 amount\\n    );\\n    /// @dev Emitted when positions are successfully merged.\\n    event PositionsMerge(\\n        address indexed stakeholder,\\n        IERC20 collateralToken,\\n        bytes32 indexed parentCollectionId,\\n        bytes32 indexed conditionId,\\n        uint256[] partition,\\n        uint256 amount\\n    );\\n    event PayoutRedemption(\\n        address indexed redeemer,\\n        IERC20 indexed collateralToken,\\n        bytes32 indexed parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] indexSets,\\n        uint256 payout\\n    );\\n\\n    /// Mapping key is an condition ID. Value represents numerators of the payout vector associated with the condition. This array is initialized with a length equal to the outcome slot count. E.g. Condition with 3 outcomes [A, B, C] and two of those correct [0.5, 0.5, 0]. In Ethereum there are no decimal values, so here, 0.5 is represented by fractions like 1/2 == 0.5. That's why we need numerator and denominator values. Payout numerators are also used as a check of initialization. If the numerators array is empty (has length zero), the condition was not created/prepared. See getOutcomeSlotCount.\\n    function payoutNumerators(bytes32) external returns (uint256[] memory);\\n\\n    /// Denominator is also used for checking if the condition has been resolved. If the denominator is non-zero, then the condition has been resolved.\\n    function payoutDenominator(bytes32) external returns (uint256);\\n\\n    /// @dev This function prepares a condition by initializing a payout vector associated with the condition.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint256 outcomeSlotCount\\n    ) external;\\n\\n    /// @dev Called by the oracle for reporting results of conditions. Will set the payout vector for the condition with the ID ``keccak256(abi.encodePacked(oracle, questionId, outcomeSlotCount))``, where oracle is the message sender, questionId is one of the parameters of this function, and outcomeSlotCount is the length of the payouts parameter, which contains the payoutNumerators for each outcome slot of the condition.\\n    /// @param questionId The question ID the oracle is answering for\\n    /// @param payouts The oracle's answer\\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\\n\\n    /// @dev This function splits a position. If splitting from the collateral, this contract will attempt to transfer `amount` collateral from the message sender to itself. Otherwise, this contract will burn `amount` stake held by the message sender in the position being split worth of EIP 1155 tokens. Regardless, if successful, `amount` stake will be minted in the split target positions. If any of the transfers, mints, or burns fail, the transaction will revert. The transaction will also revert if the given partition is trivial, invalid, or refers to more slots than the condition is prepared with.\\n    /// @param collateralToken The address of the positions' backing collateral token.\\n    /// @param parentCollectionId The ID of the outcome collections common to the position being split and the split target positions. May be null, in which only the collateral is shared.\\n    /// @param conditionId The ID of the condition to split on.\\n    /// @param partition An array of disjoint index sets representing a nontrivial partition of the outcome slots of the given condition. E.g. A|B and C but not A|B and B|C (is not disjoint). Each element's a number which, together with the condition, represents the outcome collection. E.g. 0b110 is A|B, 0b010 is B, etc.\\n    /// @param amount The amount of collateral or stake to split.\\n    function splitPosition(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function mergePositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemPositions(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata indexSets\\n    ) external;\\n\\n    /// @dev Gets the outcome slot count of a condition.\\n    /// @param conditionId ID of the condition.\\n    /// @return Number of outcome slots associated with a condition, or zero if condition has not been prepared yet.\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\n\\n    /// @dev Constructs a condition ID from an oracle, a question ID, and the outcome slot count for the question.\\n    /// @param oracle The account assigned to report the result for the prepared condition.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which should be used for this condition. Must not exceed 256.\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint256 outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    /// @dev Constructs an outcome collection ID from a parent collection and an outcome collection.\\n    /// @param parentCollectionId Collection ID of the parent outcome collection, or bytes32(0) if there's no parent.\\n    /// @param conditionId Condition ID of the outcome collection to combine with the parent outcome collection.\\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection.\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    /// @dev Constructs a position ID from a collateral token and an outcome collection. These IDs are used as the ERC-1155 ID for this contract.\\n    /// @param collateralToken Collateral token which backs the position.\\n    /// @param collectionId ID of the outcome collection associated with this position.\\n    function getPositionId(IERC20 collateralToken, bytes32 collectionId) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xb8757685cebd5291915c03a13de07123d1218d558f96023fa276bf520bc096b6\",\"license\":\"MIT\"},\"contracts/interfaces/IOptimisticOracle.sol\":{\"content\":\"pragma solidity 0.7.5;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOptimisticOracle {\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (int256);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x385376346f39e1e00f05e7a00db5c8df16a4b205271047e83d8afab652d7c6c8\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516118583803806118588339818101604052604081101561003357600080fd5b50805160209091015160006100466100ae565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b0319606092831b8116608052911b1660a0526100b2565b3390565b60805160601c60a05160601c6117646100f460003980610460528061068652806109ae5280610a2d5250806108e45280610c83528061106c52506117646000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637998a1c41161008c578063a39cc29911610066578063a39cc2991461029b578063c33da50614610312578063c66d4c6c146103d3578063f2fde38b146103db576100ea565b80637998a1c4146101ad5780638da5cb5b146101c757806395addb90146101cf576100ea565b80632baf63ea116100c85780632baf63ea1461015c5780633cc792651461018057806370b9e9041461019d578063715018a6146101a5576100ea565b806310e16b5a146100ef5780632654320c14610120578063275180c01461013d575b600080fd5b61010c6004803603602081101561010557600080fd5b5035610401565b604080519115158252519081900360200190f35b61010c6004803603602081101561013657600080fd5b50356105b3565b61015a6004803603602081101561015357600080fd5b5035610627565b005b6101646109ac565b604080516001600160a01b039092168252519081900360200190f35b61015a6004803603602081101561019657600080fd5b50356109d0565b610164610c81565b61015a610ca5565b6101b5610d70565b60408051918252519081900360200190f35b610164610d86565b6101ec600480360360208110156101e557600080fd5b5035610d95565b6040518088815260200180602001878152602001866001600160a01b0316815260200185815260200184151581526020018315158152602001828103825288818151815260200191508051906020019080838360005b8381101561025a578181015183820152602001610242565b50505050905090810190601f1680156102875780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b61015a600480360360408110156102b157600080fd5b813591908101906040810160208201356401000000008111156102d357600080fd5b8201836020820111156102e557600080fd5b8035906020019184602083028401116401000000008311171561030757600080fd5b509092509050610e6a565b61015a600480360360a081101561032857600080fd5b8135919081019060408101602082013564010000000081111561034a57600080fd5b82018360208201111561035c57600080fd5b8035906020019184600183028401116401000000008311171561037e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060208101356001600160a01b0316906040013561112a565b6101b561138b565b61015a600480360360208110156103f157600080fd5b50356001600160a01b0316611392565b600061040c826114b3565b610418575060006105ae565b6000828152600160205260409020600581015460ff1661043c5760009150506105ae565b600581015460ff6101009091041615156001141561045e5760009150506105ae565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc58ccaa306e5945535f4f525f4e4f5f515545525960881b8460020154856001016040518563ffffffff1660e01b815260040180856001600160a01b031681526020018481526020018381526020018060200182810382528381815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561055d5780601f106105325761010080835404028352916020019161055d565b820191906000526020600020905b81548152906001019060200180831161054057829003601f168201915b50509550505050505060206040518083038186803b15801561057e57600080fd5b505afa158015610592573d6000803e3d6000fd5b505050506040513d60208110156105a857600080fd5b50519150505b919050565b60006105be826114b3565b6105ca575060006105ae565b60008281526001602081905260409091206005810154909160ff909116151514156105f95760009150506105ae565b600581015460ff6101009091041615156001141561061b5760009150506105ae565b60020154421192915050565b61063081610401565b61066b5760405162461bcd60e51b815260040180806020018281038252603e815260200180611606603e913960400191505060405180910390fd5b600060016000838152602001908152602001600020905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166353b592396e5945535f4f525f4e4f5f515545525960881b8460020154856001016040518463ffffffff1660e01b815260040180848152602001838152602001806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156107735780601f1061074857610100808354040283529160200191610773565b820191906000526020600020905b81548152906001019060200180831161075657829003601f168201915b5050945050505050602060405180830381600087803b15801561079557600080fd5b505af11580156107a9573d6000803e3d6000fd5b505050506040513d60208110156107bf57600080fd5b50516040805160028082526060808301845293945090916020830190803683370190505090508115806107f25750816001145b61082d5760405162461bcd60e51b815260040180806020018281038252602f815260200180611570602f913960400191505060405180910390fd5b8161086d5760008160008151811061084157fe5b60200260200101818152505060018160018151811061085c57fe5b6020026020010181815250506108a4565b60018160008151811061087c57fe5b60200260200101818152505060008160018151811061089757fe5b6020026020010181815250505b60058301805461ff00191661010017905560408051633124a62b60e21b815260048101868152602482019283528351604483015283516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169363c49298ac9389938793909291606401906020808601910280838360005b8381101561093b578181015183820152602001610923565b505050509050019350505050600060405180830381600087803b15801561096157600080fd5b505af1158015610975573d6000803e3d6000fd5b5050604051600092508691507f5c3937ed929cd157b73b417381d743daf6e1ef65999e3ccb5dd64bc3247e28d6908390a350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109d9816105b3565b610a145760405162461bcd60e51b81526004018080602001828103825260418152602001806115c56041913960600191505060405180910390fd5b60006001600083815260200190815260200160002090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166311df92f16e5945535f4f525f4e4f5f515545525960881b8360020154846001018560030160009054906101000a90046001600160a01b031686600401546040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610b4c5780601f10610b2157610100808354040283529160200191610b4c565b820191906000526020600020905b815481529060010190602001808311610b2f57829003601f168201915b50509650505050505050602060405180830381600087803b158015610b7057600080fd5b505af1158015610b84573d6000803e3d6000fd5b505050506040513d6020811015610b9a57600080fd5b505060058101805460ff19166001908117909155600280830154604080516020808252868601805460001997811615610100029790970190961694909404938101849052869492936e5945535f4f525f4e4f5f515545525960881b937fb3036668442f09de8ac90882eb5202b825623fdea099ea280fea875ff73f308893909291829182019084908015610c6f5780601f10610c4457610100808354040283529160200191610c6f565b820191906000526020600020905b815481529060010190602001808311610c5257829003601f168201915b50509250505060405180910390a45050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610cad6114ca565b6001600160a01b0316610cbe610d86565b6001600160a01b031614610d19576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6e5945535f4f525f4e4f5f515545525960881b81565b6000546001600160a01b031690565b600160208181526000928352604092839020805481840180548651600296821615610100026000190190911695909504601f81018590048502860185019096528585529094919392909190830182828015610e315780601f10610e0657610100808354040283529160200191610e31565b820191906000526020600020905b815481529060010190602001808311610e1457829003601f168201915b50505050600283015460038401546004850154600590950154939491936001600160a01b03909116925060ff8082169161010090041687565b610e726114ca565b6001600160a01b0316610e83610d86565b6001600160a01b031614610ede576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610ee7836114b3565b610f225760405162461bcd60e51b815260040180806020018281038252603e815260200180611644603e913960400191505060405180910390fd5b60008381526001602052604090206002015462278d00014211610f765760405162461bcd60e51b815260040180806020018281038252603d8152602001806116b9603d913960400191505060405180910390fd5b81816001818110610f8357fe5b9050602002013582826000818110610f9757fe5b9050602002013501600114610fdd5760405162461bcd60e51b81526004018080602001828103825260378152602001806116826037913960400191505060405180910390fd5b6002811461101c5760405162461bcd60e51b81526004018080602001828103825260378152602001806116826037913960400191505060405180910390fd5b60008381526001602090815260409182902060058101805461ff0019166101001790558251633124a62b60e21b815260048101878152602482019485526044820186905291936001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169363c49298ac938993899389939091606401908590850280828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b1580156110de57600080fd5b505af11580156110f2573d6000803e3d6000fd5b5050604051600192508691507f5c3937ed929cd157b73b417381d743daf6e1ef65999e3ccb5dd64bc3247e28d690600090a350505050565b6111326114ca565b6001600160a01b0316611143610d86565b6001600160a01b03161461119e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6111a7856114b3565b156111e35760405162461bcd60e51b81526004018080602001828103825260398152602001806116f66039913960400191505060405180910390fd5b6040805160e08101825286815260208082018781528284018790526001600160a01b038616606084015260808301859052600060a0840181905260c08401819052898152600180845294902083518155905180519394919361124d939285019291909101906114ce565b50604082810151600283015560608084015160038401805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179055608080860151600486015560a0808701516005909601805460c09098015160ff199098169615159690961761ff0019166101009715159790970296909617909455825160208082018a905291881693810193909352908201859052828252875192820192909252865188937fc90825528edadcc19b4719354e63fb57b1e7d378e1ed2d11a3df71861b3b2dbf9389938993899389938392918301919088019080838360005b8381101561134757818101518382015260200161132f565b50505050905090810190601f1680156113745780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a25050505050565b62278d0081565b61139a6114ca565b6001600160a01b03166113ab610d86565b6001600160a01b031614611406576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661144b5760405162461bcd60e51b815260040180806020018281038252602681526020018061159f6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600090815260016020526040902060020154151590565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282611504576000855561154a565b82601f1061151d57805160ff191683800117855561154a565b8280016001018555821561154a579182015b8281111561154a57825182559160200191906001019061152f565b5061155692915061155a565b5090565b5b80821115611556576000815560010161155b56fe416461707465723a3a7265706f72745061796f7574733a20496e76616c6964207265736f6c7574696f6e20646174614f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416461707465723a3a726571756573745265736f6c7574696f6e446174613a205175657374696f6e206e6f7420726561647920746f206265207265736f6c766564416461707465723a3a7265706f72745061796f7574733a207175657374696f6e4944206e6f7420726561647920746f207265706f7274207061796f757473416461707465723a3a656d657267656e63795265706f72745061796f7574733a207175657374696f6e4944206973206e6f7420696e697469616c697a6564416461707465723a3a656d657267656e63795265706f72745061796f7574733a207061796f757473206d7573742062652062696e617279416461707465723a3a656d657267656e63795265706f72745061796f7574733a2073616665747920706572696f6420686173206e6f7420706173736564416461707465723a3a696e697469616c697a655175657374696f6e3a205175657374696f6e20616c726561647920696e697469616c697a6564a264697066735822122084c28913fc77afd6e92d1389052e874d81ad5de52b0c1206c71d91c18772ff3764736f6c63430007050033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "emergencyReportPayouts(bytes32,uint256[])": {
        "params": {
          "questionID": "- The unique questionID of the condition"
        }
      },
      "initializeQuestion(bytes32,bytes,uint256,address,uint256)": {
        "params": {
          "ancillaryData": "- Holds data used to resolve a question",
          "questionID": "- The unique questionID of the condition",
          "resolutionTime": "- timestamp at which the Adapter can resolve a question",
          "reward": "- reward offered to a successful proposer",
          "rewardToken": "- ERC20 token address used for payment of rewards and fees"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "readyToReportPayouts(bytes32)": {
        "params": {
          "questionID": "- The unique questionID of the condition"
        }
      },
      "readyToRequestResolution(bytes32)": {
        "params": {
          "questionID": "- The unique questionID of the condition"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reportPayouts(bytes32)": {
        "params": {
          "questionID": "- The unique questionID of the condition"
        }
      },
      "requestResolutionData(bytes32)": {
        "params": {
          "questionID": "- The unique questionID of the condition"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "UmaConditionalTokensBinaryAdapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyReportPayouts(bytes32,uint256[])": {
        "notice": "Allows the owner to report payouts in an emergency"
      },
      "initializeQuestion(bytes32,bytes,uint256,address,uint256)": {
        "notice": "Initializes a question on the Adapter to report on. Once initialized, the resolution conditions may not be changed."
      },
      "readyToReportPayouts(bytes32)": {
        "notice": "Checks whether a questionID is ready to report payouts"
      },
      "readyToRequestResolution(bytes32)": {
        "notice": "- Checks whether or not a question can start the resolution process"
      },
      "reportPayouts(bytes32)": {
        "notice": "Can be called by anyone to resolve a condition"
      },
      "requestResolutionData(bytes32)": {
        "notice": "Called by anyone to request resolution data from the Optimistic Oracle"
      }
    },
    "notice": "allows a condition on a ConditionalTokens contract to be resolved via UMA's Optimistic Oracle",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1113,
        "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
        "label": "questions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(QuestionData)1109_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(QuestionData)1109_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct UmaConditionalTokensBinaryAdapter.QuestionData)",
        "numberOfBytes": "32",
        "value": "t_struct(QuestionData)1109_storage"
      },
      "t_struct(QuestionData)1109_storage": {
        "encoding": "inplace",
        "label": "struct UmaConditionalTokensBinaryAdapter.QuestionData",
        "members": [
          {
            "astId": 1096,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "questionID",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1098,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "ancillaryData",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1100,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "resolutionTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1102,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "rewardToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1104,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "reward",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1106,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "resolutionDataRequested",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 1108,
            "contract": "contracts/UmaConditionalTokensBinaryAdapter.sol:UmaConditionalTokensBinaryAdapter",
            "label": "resolved",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}